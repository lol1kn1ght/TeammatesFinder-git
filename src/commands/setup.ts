import { argsType, ButtonsLabels, PlatformsChooseButtons } from "../types";
import { Context, Keyboard } from "grammy";

type profileType = {
  nickname: string;
  platforms: string[];
  games: string[];
};

export default class Command {
  public static readonly commandName = "setup";

  private userData: profileType = {
    nickname: "",
    platforms: [],
    games: [],
  };

  readonly ChooseButtonsLabels: { [k: string]: string } = {
    ACCEPT: "‚ö°Ô∏è –î–∞–ª—å—à–µ",
    BACK: "‚ùå –ù–∞–∑–∞–¥",
  };
  constructor(private args: argsType, private command: Context) {
    this.execute();
  }

  async execute() {
    await this.send(
      "‚ú® –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ :3\n\n–î–∞–≤–∞–π—Ç–µ —è –∑–∞–¥–∞–º –≤–∞–º –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ —á—Ç–æ –±—ã –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
    );

    await this.send(
      `${this._getDisplayProfile()} –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç –≤ Social Club?\n\n–ó–∞—á–µ–º —ç—Ç–æ?: –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –Ω–∏–∫–Ω–µ–π–º —á—Ç–æ –±—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –±—ã–ª–æ –ª–µ–≥—á–µ –≤–∞—Å –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –¥—Ä—É–∑—å—è –∏ –≤–∞–º –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–µ–º —Å–≤–æ–π –Ω–∏–∫ ;3\n\n`
    );

    await this.askNickname();

    if (!this.userData.nickname) return;

    await this.send(
      `${this._getDisplayProfile()} –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π(-–∞–º–∏) :3\n\n–°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∏–≥—Ä–∞–µ—Ç–µ (—Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω–æ!). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "${
        ButtonsLabels.ACCEPT
      }". –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –µ—â–µ —Ä–∞–∑ ;3`
    );

    await this.askPlatforms();

    if (!this.userData.platforms || !this.userData.platforms[0]) return;

    await this.send(
      `${this._getDisplayProfile()}üßê –Ø –¥—É–º–∞—é, —á—Ç–æ —Ç–∞–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏ –≤—ã —Å–∫–æ—Ä–æ –∑–∞–≤–µ–¥–µ—Ç–µ –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π. –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä—É –∏–≥—Ä –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤.`
    );

    await this.askGames();

    if (!this.userData.games || !this.userData.games[0]) return;

    await this.confirm();
  }

  async askNickname() {
    const nickNameMessage = await this._awaitMessage();

    if (!nickNameMessage) {
      this.send("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º!");
      return;
    }

    const nickname = nickNameMessage.update.message?.text;

    if (!nickname) {
      this.send("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º!");
      return;
    }

    if (nickname.length < 6) {
      this.send(
        "‚ùå –≠–π, –≤–∞—à –Ω–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ. /setup"
      );
      return;
    }

    if (nickname.length > 16) {
      this.send(
        "‚ùå –≠–π, –≤–∞—à –Ω–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –û–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 16-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ. /setup"
      );
      return;
    }

    this.userData.nickname = nickname;

    this.send("üî• –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º!");
  }

  private async askPlatforms() {
    await this.command.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:", {
      reply_markup: await this._displayButtons(
        Object.values(PlatformsChooseButtons)
      ),
    });
    const platformsMessage = await this._awaitMessage();

    if (!platformsMessage) {
      this.send("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!");
      return;
    }

    const platformName = platformsMessage.update.message!.text;

    const platform = Object.keys(PlatformsChooseButtons).filter(
      (key) => PlatformsChooseButtons[key] === platformName
    )[0];

    if (!platform) {
      this.send("‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!");

      return;
    }

    if (platform === "ACCEPT") {
      if (this.userData.platforms.length < 1) {
        this.send(
          "‚ö†Ô∏è –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!"
        );
        await this.askPlatforms();
        return;
      } else return;
    }

    if (this.userData.platforms.includes(platform)) {
      this.userData.platforms.splice(
        this.userData.platforms.indexOf(platform),
        1
      );

      await this.send(
        `‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ! –Ø –µ–µ —É–¥–∞–ª–∏–ª, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ "${platformName}" —Å–Ω–æ–≤–∞.\n\n–ï—Å–ª–∏ –Ω–∞–¥–æ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º.\n\n–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "${PlatformsChooseButtons.ACCEPT}"`
      );

      await this.askPlatforms();
      return;
    }

    this.userData.platforms.push(platform);
    this.send(
      `‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É "${platformName}" –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n–ï—Å–ª–∏ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "${PlatformsChooseButtons.ACCEPT}"`
    );
    await this.askPlatforms();
  }

  async askGames() {
    await this.command.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–≥—Ä—ã:", {
      reply_markup: await this._displayButtons(Object.values(ButtonsLabels)),
    });
    const gamesMessage = await this._awaitMessage();

    if (!gamesMessage) {
      this.send("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–≥—Ä—É!");
      return;
    }

    const gameName = gamesMessage.update.message!.text;

    const game = Object.keys(ButtonsLabels).filter(
      (key) => ButtonsLabels[key] === gameName
    )[0];

    if (!game) {
      this.send("‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É!");

      return;
    }

    if (game === "ACCEPT") {
      if (this.userData.games.length < 1) {
        await this.send(
          "‚ö†Ô∏è –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É!"
        );
        await this.askGames();
        return;
      } else return;
    }

    if (this.userData.games.includes(game)) {
      this.userData.games.splice(this.userData.games.indexOf(game), 1);

      await this.send(
        `‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ! –Ø –µ–µ —É–¥–∞–ª–∏–ª, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ "${gameName}" —Å–Ω–æ–≤–∞.\n\n–ï—Å–ª–∏ –Ω–∞–¥–æ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä.\n\n–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "${PlatformsChooseButtons.ACCEPT}"`
      );

      await this.askGames();
      return;
    }

    this.userData.games.push(game);
    await this.send(
      `‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏–≥—Ä—É "${gameName}" –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–≥—Ä! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n–ï—Å–ª–∏ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "${ButtonsLabels.ACCEPT}"`
    );
    await this.askGames();
  }

  private async _awaitMessage(): Promise<Context> {
    const messagePromise = new Promise<Context>((resolve) => {
      this.args.EventsHandler.once("message", (message) => {
        message = message!;
        console.log(message.update.message);

        if (message.chat?.id === this.command.chat?.id) resolve(message);
      });
    });

    return messagePromise;
  }

  private async _displayButtons(buttons: string[]) {
    const keyboard = new Keyboard();

    let counter = 1;

    for (let button of buttons) {
      keyboard.text(button);

      counter++;

      if (counter > 3) {
        keyboard.row();
        counter = 1;
      }
    }

    return keyboard;
  }

  private _getDisplayProfile() {
    const displayGamesList = this.userData.games
      .map((game) => ButtonsLabels[game])
      .join(", ");

    const platformsList = this.userData.platforms
      .map((platform) => PlatformsChooseButtons[platform])
      .join(", ");

    const displayProfile = `üìù –í–∞—à –Ω–∏–∫–Ω–µ–π–º: ${
      this.userData.nickname || "–ü—É—Å—Ç–æ"
    };\nüìå –í–∞—à–∏ –∏–≥—Ä—ã: ${displayGamesList || "–ü—É—Å—Ç–æ"};\nüíæ –í–∞—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${
      platformsList || "–ü—É—Å—Ç–æ"
    };\n\n`;
    return displayProfile;
  }

  async confirm() {
    this.command.reply(
      `üî• –û–≥–æ–Ω—å! –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n${this._getDisplayProfile()}–ï—Å–ª–∏ –≤–∞—Å –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "${
        this.ChooseButtonsLabels.ACCEPT
      }" –∏–ª–∏ "${
        this.ChooseButtonsLabels.BACK
      }" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ.`,
      {
        reply_markup: await this._displayButtons(
          Object.values(this.ChooseButtonsLabels)
        ),
      }
    );

    const confirmMessage = await this._awaitMessage();

    if (!confirmMessage) {
      this.send("‚ùå –í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–µ—Ç!");
      return;
    }

    const confirm = confirmMessage.update.message?.text;
    const answer = Object.keys(this.ChooseButtonsLabels).filter(
      (key) => this.ChooseButtonsLabels[key] === confirm
    )[0];

    if (!answer) {
      this.send("‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!");
      return;
    }

    if (answer === "BACK") {
      this.userData.platforms = [];
      this.userData.games = [];
      this.userData = {
        nickname: "",
        platforms: [],
        games: [],
      };

      this.execute();
      return;
    }

    if (answer === "ACCEPT") {
      const { PlayerModel } = this.args.schemes;
      const commandAuthor = await this.command.getAuthor();

      const isExist = await PlayerModel.findOne({
        login: commandAuthor.user.id.toString(),
      });
      console.log(this.userData);

      if (!isExist) {
        PlayerModel.create({
          login: commandAuthor.user.id.toString(),
          ...this.userData,
        });
      } else {
        PlayerModel.updateOne(
          {
            login: commandAuthor.user.id.toString(),
          },
          {
            $set: this.userData,
          }
        );
      }

      this.send(
        "üéâ –Æ—Ö—É! –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –≤ –Ω–∞—à–µ–º —á–∞—Ç–∏–∫–µ :3"
      );
    }
  }

  send(content: string) {
    if (!content) throw Error("No reply content");
    this.command.reply(content, {
      reply_markup: undefined,
    });
  }
}
